name: 'Terraform Virtual WAN'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-virtualwan.yml'
      - 'config/**'

permissions:
  id-token: write
  contents: read

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    env:
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_environment: "prod"

    defaults:
      run:
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.12.2"

    - name: Setup Backend Storage
      id: storage
      run: |
        # Set variables
        RESOURCE_GROUP="rg-tf-state"
        RANDOM_SUFFIX=$(openssl rand -hex 4)
        STORAGE_ACCOUNT="stterraformstate${RANDOM_SUFFIX}"
        CONTAINER_NAME="tfstate"
        LOCATION="eastus"

        # Create resource group if it doesn't exist
        echo "Creating resource group $RESOURCE_GROUP..."
        az group create --name $RESOURCE_GROUP --location $LOCATION

        # Create storage account if it doesn't exist
        echo "Creating storage account $STORAGE_ACCOUNT..."
        az storage account create \
            --name $STORAGE_ACCOUNT \
            --resource-group $RESOURCE_GROUP \
            --location $LOCATION \
            --sku Standard_LRS \
            --encryption-services blob

        # Create blob container if it doesn't exist
        echo "Creating blob container $CONTAINER_NAME..."
        az storage container create \
            --name $CONTAINER_NAME \
            --account-name $STORAGE_ACCOUNT

        # Save storage account name for later steps
        echo "storage_account=$STORAGE_ACCOUNT" >> $GITHUB_OUTPUT

    - name: Get Hub List
      id: hubs
      run: |
        # Get list of hub config files
        HUB_FILES=$(ls config/hubs/*.yaml)
        HUB_NAMES=""
        for file in $HUB_FILES; do
          HUB_NAME=$(basename "$file" .yaml)
          HUB_NAMES="$HUB_NAMES $HUB_NAME"
        done
        echo "hub_names=$HUB_NAMES" >> $GITHUB_OUTPUT

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Apply
      run: |
        # Process each hub
        for hub in ${{ steps.hubs.outputs.hub_names }}; do
          echo "Processing hub: $hub"
          
          # Create backend.tf file for each hub
          cat > backend.tf << 'EOF'
        terraform {
          backend "azurerm" {
            resource_group_name  = "rg-tf-state"
            storage_account_name = "STORAGE_ACCOUNT_PLACEHOLDER"
            container_name       = "tfstate"
            key                  = "HUB_NAME_PLACEHOLDER"
            use_oidc             = true
          }
        }
        EOF
          
          # Replace placeholders with actual values
          sed -i "s/STORAGE_ACCOUNT_PLACEHOLDER/${{ steps.storage.outputs.storage_account }}/g" backend.tf
          sed -i "s/HUB_NAME_PLACEHOLDER/prod\/${hub}.tfstate/g" backend.tf
          
          echo "Backend configuration created for hub: $hub"
          cat backend.tf
          
          terraform init -reconfigure
          
          # Import existing resource group if it exists
          terraform import azurerm_resource_group.vwan /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-vwan-prod || echo "Resource group import failed or not needed"
          
          echo "Running terraform apply for hub: $hub"
          
          echo "Debug: Hub name being passed: ${hub}"
          
          # Create a comprehensive tfvars file with all variables
          echo "client_id = \"${{ secrets.AZURE_CLIENT_ID }}\"" > terraform.tfvars
          echo "tenant_id = \"${{ secrets.AZURE_TENANT_ID }}\"" >> terraform.tfvars
          echo "subscription_id = \"${{ secrets.AZURE_SUBSCRIPTION_ID }}\"" >> terraform.tfvars
          echo "environment = \"prod\"" >> terraform.tfvars
          echo "hub_name = \"${hub}\"" >> terraform.tfvars
          
          echo "Debug: Contents of terraform.tfvars:"
          cat terraform.tfvars
          
          echo "Debug: Environment variables:"
          env | grep TF_VAR
          
          echo "Debug: About to run terraform apply..."
          terraform apply -auto-approve -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" -var="environment=prod" -var="hub_name=${hub}" -input=false
        done 