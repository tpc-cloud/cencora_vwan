name: 'Terraform Virtual WAN Hubs'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-virtualwan.yml'
      - 'config/**'

permissions:
  id-token: write
  contents: read

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
  terraform-hubs:
    name: 'Terraform Virtual WAN Hubs'
    runs-on: ubuntu-latest
    environment: production

    env:
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_environment: "prod"

    defaults:
      run:
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.12.2"

    - name: Setup Backend Storage
      id: storage
      run: |
        # Set variables
        RESOURCE_GROUP="rg-tf-state"
        STORAGE_ACCOUNT="sttfstatecencoraprod"
        CONTAINER_NAME="tfstate"
        LOCATION="eastus"

        # Create resource group if it doesn't exist
        echo "Creating resource group $RESOURCE_GROUP..."
        az group create --name $RESOURCE_GROUP --location $LOCATION

        # Check if storage account already exists
        if az storage account show --name $STORAGE_ACCOUNT --resource-group $RESOURCE_GROUP >/dev/null 2>&1; then
          echo "Storage account $STORAGE_ACCOUNT already exists, skipping creation"
        else
          # Create storage account if it doesn't exist
          echo "Creating storage account $STORAGE_ACCOUNT..."
          az storage account create \
              --name $STORAGE_ACCOUNT \
              --resource-group $RESOURCE_GROUP \
              --location $LOCATION \
              --sku Standard_LRS \
              --encryption-services blob
        fi

        # Create blob container if it doesn't exist
        echo "Creating blob container $CONTAINER_NAME..."
        az storage container create \
            --name $CONTAINER_NAME \
            --account-name $STORAGE_ACCOUNT

        # Save storage account name for later steps
        echo "storage_account=$STORAGE_ACCOUNT" >> $GITHUB_OUTPUT

    - name: Get Changed Hub Files
      id: changed_hubs
      run: |
        # Get list of changed hub config files
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep "config/hubs/.*\.yaml" || echo "")
        
        if [ -z "$CHANGED_FILES" ]; then
          # If no specific hub files changed, process all hubs
          HUB_FILES=$(ls config/hubs/*.yaml)
          echo "No specific hub files changed, processing all hubs"
        else
          # Process only changed hub files
          HUB_FILES="$CHANGED_FILES"
          echo "Processing only changed hub files: $HUB_FILES"
        fi
        
        HUB_NAMES=""
        for file in $HUB_FILES; do
          HUB_NAME=$(basename "$file" .yaml)
          HUB_NAMES="$HUB_NAMES $HUB_NAME"
        done
        echo "hub_names=$HUB_NAMES" >> $GITHUB_OUTPUT
        echo "Processing hubs: $HUB_NAMES"

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Apply Hub
      run: |
        # Process each hub
        for hub in ${{ steps.changed_hubs.outputs.hub_names }}; do
          echo "Processing hub: $hub"
          
          # Create a clean directory for this hub
          mkdir -p hub-${hub}
          cp variables.tf hub-${hub}/
          cp main-hubs.tf hub-${hub}/main.tf
          
          # Create backend.tf file for this hub
          cat > hub-${hub}/backend.tf << 'EOF'
        terraform {
          backend "azurerm" {
            resource_group_name  = "rg-tf-state"
            storage_account_name = "STORAGE_ACCOUNT_PLACEHOLDER"
            container_name       = "tfstate"
            key                  = "HUB_NAME_PLACEHOLDER"
            use_oidc             = true
          }
        }
        EOF
          
          # Replace placeholders with actual values
          sed -i "s/STORAGE_ACCOUNT_PLACEHOLDER/${{ steps.storage.outputs.storage_account }}/g" hub-${hub}/backend.tf
          sed -i "s/HUB_NAME_PLACEHOLDER/prod\/${hub}.tfstate/g" hub-${hub}/backend.tf
          
          # Create terraform.tfvars for this hub
          echo "client_id = \"${{ secrets.AZURE_CLIENT_ID }}\"" > hub-${hub}/terraform.tfvars
          echo "tenant_id = \"${{ secrets.AZURE_TENANT_ID }}\"" >> hub-${hub}/terraform.tfvars
          echo "subscription_id = \"${{ secrets.AZURE_SUBSCRIPTION_ID }}\"" >> hub-${hub}/terraform.tfvars
          echo "environment = \"prod\"" >> hub-${hub}/terraform.tfvars
          echo "hub_name = \"${hub}\"" >> hub-${hub}/terraform.tfvars
          
          # Break any existing blob leases
          echo "Breaking any existing blob leases..."
          az storage blob lease break --container-name tfstate --blob-name "prod/${hub}.tfstate" --account-name ${{ steps.storage.outputs.storage_account }} 2>/dev/null || echo "No existing lease to break or blob doesn't exist"
          
          echo "Debug: Files in hub-${hub} directory:"
          ls -la hub-${hub}/
          
          # Run terraform in the hub directory
          cd hub-${hub}
          terraform init -reconfigure
          terraform apply -auto-approve -var-file="terraform.tfvars" -input=false -lock=false
          cd .. 