name: 'Terraform Virtual WAN Destroy'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
          - dev
          - test

permissions:
  id-token: write
  contents: read

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
  terraform-destroy:
    name: 'Terraform Virtual WAN Destroy'
    runs-on: ubuntu-latest
    environment: production

    env:
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_environment: ${{ github.event.inputs.environment }}

    defaults:
      run:
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.12.2"

    - name: Get Hub List
      id: hubs
      run: |
        # Get list of hub config files
        HUB_FILES=$(ls config/hubs/*.yaml)
        HUB_NAMES=""
        for file in $HUB_FILES; do
          HUB_NAME=$(basename "$file" .yaml)
          HUB_NAMES="$HUB_NAMES $HUB_NAME"
        done
        echo "hub_names=$HUB_NAMES" >> $GITHUB_OUTPUT

    - name: Terraform Destroy
      run: |
        # Process each hub in reverse order (destroy dependencies first)
        for hub in ${{ steps.hubs.outputs.hub_names }}; do
          echo "Destroying hub: $hub"
          
          # Create backend.tf file for each hub
          cat > backend.tf << 'EOF'
        terraform {
          backend "azurerm" {
            resource_group_name  = "rg-tf-state"
            storage_account_name = "STORAGE_ACCOUNT_PLACEHOLDER"
            container_name       = "tfstate"
            key                  = "HUB_NAME_PLACEHOLDER"
            use_oidc             = true
          }
        }
        EOF
          
          # Replace placeholders with actual values
          sed -i "s/STORAGE_ACCOUNT_PLACEHOLDER/sttfstatecencoraprod/g" backend.tf
          sed -i "s/HUB_NAME_PLACEHOLDER/${{ github.event.inputs.environment }}\/${hub}.tfstate/g" backend.tf
          
          echo "Backend configuration created for hub: $hub"
          cat backend.tf
          
          terraform init
          
          # Break any existing blob leases
          echo "Breaking any existing blob leases..."
          az storage blob lease break --container-name tfstate --blob-name "${{ github.event.inputs.environment }}/${hub}.tfstate" --account-name sttfstatecencoraprod 2>/dev/null || echo "No existing lease to break or blob doesn't exist"
          
          echo "Destroying infrastructure for hub: $hub"
          
          # Create terraform.tfvars file
          echo "client_id = \"${{ secrets.AZURE_CLIENT_ID }}\"" > terraform.tfvars
          echo "tenant_id = \"${{ secrets.AZURE_TENANT_ID }}\"" >> terraform.tfvars
          echo "subscription_id = \"${{ secrets.AZURE_SUBSCRIPTION_ID }}\"" >> terraform.tfvars
          echo "environment = \"${{ github.event.inputs.environment }}\"" >> terraform.tfvars
          echo "hub_name = \"${hub}\"" >> terraform.tfvars
          
          terraform destroy -auto-approve -var-file="terraform.tfvars" -input=false -lock=false -timeout=30m
        done 