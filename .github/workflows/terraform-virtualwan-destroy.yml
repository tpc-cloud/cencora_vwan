name: 'Terraform Virtual WAN Destroy'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
          - dev
          - staging

permissions:
  id-token: write
  contents: read

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
  terraform-destroy:
    name: 'Terraform Virtual WAN Destroy'
    runs-on: ubuntu-latest
    environment: production

    env:
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    defaults:
      run:
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.12.2"

    - name: Get Enabled Hubs from Config
      id: hubs
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment }}"
        
        # Check if config file exists for this environment
        if [ ! -f "config/$ENVIRONMENT/config.yml" ]; then
          echo "Config file not found for environment: $ENVIRONMENT"
          echo "hub_names=" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Parse config to get enabled hubs
        python3 -c |
          import yaml
          import sys
          
          try:
              with open('config/$ENVIRONMENT/config.yml', 'r') as f:
                  config = yaml.safe_load(f)
              
              hubs = config.get('hubs', {})
              enabled_hubs = []
              
              for hub_name, hub_config in hubs.items():
                  if hub_config.get('enabled', False):
                      enabled_hubs.append(hub_name)
              
              print(' '.join(enabled_hubs))
              
          except Exception as e:
              print(f'Error processing config for $ENVIRONMENT: {e}')
              sys.exit(1)
        > enabled_hubs_${ENVIRONMENT}.txt
        
        ENABLED_HUBS=$(cat enabled_hubs_${ENVIRONMENT}.txt)
        echo "hub_names=$ENABLED_HUBS" >> $GITHUB_OUTPUT
        echo "Enabled hubs for environment $ENVIRONMENT: $ENABLED_HUBS"

    - name: Terraform Destroy Hubs
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment }}"
        
        # Process each enabled hub in reverse order (destroy dependencies first)
        for hub in ${{ steps.hubs.outputs.hub_names }}; do
          echo "Destroying hub: $hub for environment: $ENVIRONMENT"
          
          # Create environment-specific directory
          mkdir -p hub-${ENVIRONMENT}-${hub}
          cp variables.tf hub-${ENVIRONMENT}-${hub}/
          cp main-hubs.tf hub-${ENVIRONMENT}-${hub}/main.tf
          
          # Create backend.tf file for this hub
          cat > hub-${ENVIRONMENT}-${hub}/backend.tf << EOF
        terraform {
          backend "azurerm" {
            resource_group_name  = "rg-tf-state"
            storage_account_name = "sttfstatecencoraprod"
            container_name       = "tfstate"
            key                  = "${ENVIRONMENT}/${hub}.tfstate"
            use_oidc             = true
          }
        }
        EOF
          
          # Generate terraform.tfvars from config.yml
          python3 -c |
            import yaml
            import sys
            
            try:
                with open('config/$ENVIRONMENT/config.yml', 'r') as f:
                    config = yaml.safe_load(f)
                
                tfvars = f'''client_id = \"${{ secrets.AZURE_CLIENT_ID }}\"
            tenant_id = \"${{ secrets.AZURE_TENANT_ID }}\"
            subscription_id = \"${{ secrets.AZURE_SUBSCRIPTION_ID }}\"
            environment = \"{config.get('environment', '$ENVIRONMENT')}\"
            hub_name = \"{hub}\"
            location = \"{config.get('region', 'eastus')}\"
            '''
                
                with open('hub-$ENVIRONMENT-$hub/terraform.tfvars', 'w') as f:
                    f.write(tfvars)
                    
            except Exception as e:
                print(f'Error processing config for $ENVIRONMENT hub $hub: {e}')
                sys.exit(1)
          
          # Run terraform in the hub directory
          cd hub-${ENVIRONMENT}-${hub}
          terraform init -reconfigure
          
          # Break any existing blob leases
          echo "Breaking any existing blob leases..."
          az storage blob lease break --container-name tfstate --blob-name "${ENVIRONMENT}/${hub}.tfstate" --account-name sttfstatecencoraprod 2>/dev/null || echo "No existing lease to break or blob doesn't exist"
          
          echo "Destroying infrastructure for hub: $hub in environment: $ENVIRONMENT"
          terraform destroy -auto-approve -var-file="terraform.tfvars" -input=false -lock=false -timeout=30m
          cd ..
        done

    - name: Destroy VWAN Core (Optional)
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment }}"
        
        # Check if VWAN core should be destroyed
        if [ ! -f "config/$ENVIRONMENT/config.yml" ]; then
          echo "Config file not found for environment: $ENVIRONMENT, skipping VWAN core destruction"
          exit 0
        fi
        
        # Parse config to check if VWAN core is enabled
        python3 -c |
          import yaml
          import sys
          
          try:
              with open('config/$ENVIRONMENT/config.yml', 'r') as f:
                  config = yaml.safe_load(f)
              
              vwan_core = config.get('vwan_core', {})
              if vwan_core.get('enabled', False):
                  print('enabled')
              else:
                  print('disabled')
                  
          except Exception as e:
              print(f'Error processing config for $ENVIRONMENT: {e}')
              sys.exit(1)
        > vwan_core_status_${ENVIRONMENT}.txt
        
        VWAN_CORE_STATUS=$(cat vwan_core_status_${ENVIRONMENT}.txt)
        
        if [ "$VWAN_CORE_STATUS" != "enabled" ]; then
          echo "VWAN core is disabled for environment: $ENVIRONMENT, skipping destruction"
          exit 0
        fi
        
        echo "Destroying VWAN core for environment: $ENVIRONMENT"
        
        # Create environment-specific directory
        mkdir -p vwan-core-${ENVIRONMENT}
        cp main-vwan-core.tf vwan-core-${ENVIRONMENT}/main.tf
        cp variables.tf vwan-core-${ENVIRONMENT}/
        
        # Create backend configuration for this environment
        cat > vwan-core-${ENVIRONMENT}/backend.tf << EOF
        terraform {
          backend "azurerm" {
            resource_group_name  = "rg-tf-state"
            storage_account_name = "sttfstatecencoraprod"
            container_name       = "tfstate"
            key                  = "vwan-core-${ENVIRONMENT}.tfstate"
            use_oidc             = true
          }
        }
        EOF
        
        # Generate terraform.tfvars from config.yml
        python3 -c |
          import yaml
          import sys
          
          try:
              with open('config/$ENVIRONMENT/config.yml', 'r') as f:
                  config = yaml.safe_load(f)
              
              vwan_core = config.get('vwan_core', {})
              firewall = vwan_core.get('firewall', {})
              
              tfvars = f'''client_id = \"${{ secrets.AZURE_CLIENT_ID }}\"
          tenant_id = \"${{ secrets.AZURE_TENANT_ID }}\"
          subscription_id = \"${{ secrets.AZURE_SUBSCRIPTION_ID }}\"
          environment = \"{config.get('environment', '$ENVIRONMENT')}\"
          location = \"{config.get('region', 'eastus')}\"
          '''
              
              with open('vwan-core-$ENVIRONMENT/terraform.tfvars', 'w') as f:
                  f.write(tfvars)
                  
          except Exception as e:
              print(f'Error processing config for $ENVIRONMENT: {e}')
              sys.exit(1)
        
        # Run terraform in the environment directory
        cd vwan-core-${ENVIRONMENT}
        terraform init -reconfigure
        
        # Break any existing blob leases
        echo "Breaking any existing blob leases..."
        az storage blob lease break --container-name tfstate --blob-name "vwan-core-${ENVIRONMENT}.tfstate" --account-name sttfstatecencoraprod 2>/dev/null || echo "No existing lease to break or blob doesn't exist"
        
        echo "Destroying VWAN core infrastructure for environment: ${ENVIRONMENT}..."
        terraform destroy -auto-approve -var-file="terraform.tfvars" -input=false -lock=false -timeout=30m
        cd .. 