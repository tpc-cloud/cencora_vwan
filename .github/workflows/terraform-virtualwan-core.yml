name: 'Terraform Virtual WAN Core'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
          - dev
          - test

permissions:
  id-token: write
  contents: read

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
  terraform-vwan-core:
    name: 'Terraform Virtual WAN Core'
    runs-on: ubuntu-latest
    environment: production

    env:
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_environment: ${{ github.event.inputs.environment }}

    defaults:
      run:
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.12.2"

    - name: Setup Backend Storage
      id: storage
      run: |
        # Set variables
        RESOURCE_GROUP="rg-tf-state"
        STORAGE_ACCOUNT="sttfstatecencoraprod"
        CONTAINER_NAME="tfstate"
        LOCATION="eastus"

        # Create resource group if it doesn't exist
        echo "Creating resource group $RESOURCE_GROUP..."
        az group create --name $RESOURCE_GROUP --location $LOCATION

        # Check if storage account already exists
        if az storage account show --name $STORAGE_ACCOUNT --resource-group $RESOURCE_GROUP >/dev/null 2>&1; then
          echo "Storage account $STORAGE_ACCOUNT already exists, skipping creation"
        else
          # Create storage account if it doesn't exist
          echo "Creating storage account $STORAGE_ACCOUNT..."
          az storage account create \
              --name $STORAGE_ACCOUNT \
              --resource-group $RESOURCE_GROUP \
              --location $LOCATION \
              --sku Standard_LRS \
              --encryption-services blob
        fi

        # Create blob container if it doesn't exist
        echo "Creating blob container $CONTAINER_NAME..."
        az storage container create \
            --name $CONTAINER_NAME \
            --account-name $STORAGE_ACCOUNT

        # Save storage account name for later steps
        echo "storage_account=$STORAGE_ACCOUNT" >> $GITHUB_OUTPUT

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Apply Virtual WAN Core
      run: |
        # Create backend.tf file for Virtual WAN core
        cat > backend.tf << 'EOF'
        terraform {
          backend "azurerm" {
            resource_group_name  = "rg-tf-state"
            storage_account_name = "STORAGE_ACCOUNT_PLACEHOLDER"
            container_name       = "tfstate"
            key                  = "HUB_NAME_PLACEHOLDER"
            use_oidc             = true
          }
        }
        EOF
          
        # Replace placeholders with actual values
        sed -i "s/STORAGE_ACCOUNT_PLACEHOLDER/${{ steps.storage.outputs.storage_account }}/g" backend.tf
        sed -i "s/HUB_NAME_PLACEHOLDER/${{ github.event.inputs.environment }}\/vwan-core.tfstate/g" backend.tf
          
        echo "Backend configuration created for Virtual WAN core"
        cat backend.tf
          
        terraform init -reconfigure
          
        # Break any existing blob leases
        echo "Breaking any existing blob leases..."
        az storage blob lease break --container-name tfstate --blob-name "${{ github.event.inputs.environment }}/vwan-core.tfstate" --account-name ${{ steps.storage.outputs.storage_account }} 2>/dev/null || echo "No existing lease to break or blob doesn't exist"
          
        echo "Creating Virtual WAN core infrastructure..."
          
        # Create terraform.tfvars file
        echo "client_id = \"${{ secrets.AZURE_CLIENT_ID }}\"" > terraform.tfvars
        echo "tenant_id = \"${{ secrets.AZURE_TENANT_ID }}\"" >> terraform.tfvars
        echo "subscription_id = \"${{ secrets.AZURE_SUBSCRIPTION_ID }}\"" >> terraform.tfvars
        echo "environment = \"${{ github.event.inputs.environment }}\"" >> terraform.tfvars
        echo "hub_name = \"vwan-core\"" >> terraform.tfvars
        
        # Copy the Virtual WAN core Terraform configuration
        cp main-vwan-core.tf main.tf
          
        terraform apply -auto-approve -var-file="terraform.tfvars" -input=false -lock=false 